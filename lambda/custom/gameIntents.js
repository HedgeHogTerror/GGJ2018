
'use strict';
const Data = require('./gamedata');
const Alexa = require("alexa-sdk");
const GameIntents = require('./i').i;

var EVENTS_STATE = {
'BeginningIntent': function (){
  //attributes to be set:
  // currenteventid
  // currentAge
  // array of eventIds to exclude from next roll


  // important initialization tasks to do once
  var vDict = Data.GameData.returnNewVariableDictionary();
  this.attributes['vDict'] = vDict;
  this.attributes['currentAge'] = 1;
  this.attributes['debugId'] = 0;

  // generate a new event // the same crap we do every time
  this.attributes['eventsBlacklist'] = new Array();
  var randomEventId = Data.GameData.getNextRandomEventId(this.attributes);
  var randomEvent =  Data.GameData.questionEvents[randomEventId];
  this.attributes['currentEventId'] = randomEventId;
  this.attributes['currentEvent'] = randomEvent;

  var introduction = Data.GameData.returnCurrentAgeDescription(this.attributes['currentAge'])
    + " "
    + Data.GameData.returnRandomWorshipperText()
    + " "
    + randomEvent.intro;

  this.emit(':ask', introduction, randomEvent.intro);
},

'VerifyTheCurrentIntent': function (intentSamples){
  // Validation:
  var currentEvent = this.attributes['currentEvent'];
  var positiveOption = currentEvent.iplus;
  var negativeOption = currentEvent.iminus;
  var variable = currentEvent.variable;

  var responseText = "";

  // Validation
  var variableChange = 0;
  if (intentSamples.includes(positiveOption)) {
    // TODO cap it?
    variableChange = 1;
    responseText = currentEvent.resultplus;
  } else if (intentSamples.includes(negativeOption)) {
    variableChange = -1;
    responseText = currentEvent.resultminus;
  } else {
    // Ugh, re-emit current state description
  }

  // Stupid repeat logic
  if (variableChange == 0) {
    this.emit(':ask', 'Say '
      + positiveOption
      + ' or '
      + negativeOption
    );
  }

  // generate a new event // the same crap we do every time
  var randomEventId = Data.GameData.getNextRandomEventId(this.attributes);
  var randomEvent =  Data.GameData.questionEvents[randomEventId];
  this.attributes['currentEventId'] = randomEventId;
  this.attributes['currentEvent'] = randomEvent;
  this.attributes['currentAge'] += 1;
  this.attributes['vDict'][variable] = variableChange;

  // tell a big thing
  var vDictionary = this.attributes['vDict'];
  var description = " ... ";//". Here are some things about now. ";
  for(var key in vDictionary){
    var value = vDictionary[key];

    description += " ... " + Data.GameData.returnDescription(
       Data.GameData.variableToIndex(key),
      this.attributes['currentAge'],
      value
      );
  }

  description += " ... ";

  if(this.attributes['currentAge'] >= Data.GameData.maxAges){ // end the game
    this.emit(':tell', responseText
      + " "
      + Data.GameData.returnCurrentAgeDescription(this.attributes['currentAge'])
      + description
      + " You survey all that you have done. And you see. That it is good. The end."
    );
   }
  else{ // keep playing
    // random worshipper entrance
    description += Data.GameData.returnRandomWorshipperText();

    this.emit(':ask', responseText
      + " "
      + Data.GameData.returnCurrentAgeDescription(this.attributes['currentAge'])
      + description
      + randomEvent.intro,
       randomEvent.intro);
  }


  // TBD check for end state
},
'EndGameIntent': function() {
  this.handler.state = this.context.GameConst.States.ENDING;
},
'SessionEndedRequest' : function() {
    console.log('Session ended with reason: ' + this.event.request.reason);
},
'AMAZON.StopIntent' : function() {
    this.response.speak('Bye');
    this.emit(':responseReady');
},
'AMAZON.HelpIntent' : function() {
    this.response.speak("You can try: 'alexa, hello world' or 'alexa, ask hello world my" +
        " name is awesome Aaron'");
    this.emit(':responseReady');
},
'AMAZON.CancelIntent' : function() {
    this.response.speak('Bye');
    this.emit(':responseReady');
},
'Unhandled' : function() {
  //TBD behavior?
    this.emit(":ask","Sorry, Unhandled");
}
};

// Add the autogenerated funciton handlers for custom intents
for (var intent in GameIntents) {
  if (GameIntents.hasOwnProperty(intent)) {
    EVENTS_STATE[intent] = GameIntents[intent];
  }
}

const gameHandlers = Alexa.CreateStateHandler(Data.GameConst.States.EVENTS, EVENTS_STATE);
module.exports = gameHandlers;
